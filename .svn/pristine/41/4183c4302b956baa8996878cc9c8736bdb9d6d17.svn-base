///////////////////////////////////////////////////////////
//  MenuView.as
//  Macromedia ActionScript Implementation of the Class MenuView
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2007 13:48:23
//  Original author: USER
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-09 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////

package org.glomaker.patternmaker.view
{
	import flash.display.Sprite;
	import flash.events.*;
	import flash.geom.Point;
	
	import org.glomaker.interfaces.pattern.IPatternFunction;
	import org.glomaker.patternmaker.controller.*;
	import org.glomaker.patternmaker.data.GlobalPoint;
	import org.glomaker.patternmaker.events.*;
	import org.glomaker.patternmaker.model.IBaseModel;
	import org.glomaker.patternmaker.model.IPatternsModel;
	import org.glomaker.patternmaker.model.PatternsModel;

	/**
	 * @author USER
	 * @version 1.0
	 * @created 06-Nov-2007 13:48:23
	 */
	public class MenuView extends ComponentView {
		/**
		     * 
		     * @param aModel
		     * @param aController    aController
		     */
		protected var sqrSize:uint = 23;
		protected var pitch:uint = 32;
		protected var indent:uint = 10;
		
		protected var container:Sprite;
		
		public var menuWidth:Number;
		public var menuHeight:Number;
		
		protected var draggingInteractiveNode:InteractiveNode;
		

		public function MenuView(aModel:IBaseModel, aController:Object = null) {
			super(aModel, aController);
			
			container = new Sprite();
			container.mouseEnabled = false;
		}

		/**
		     * Get data from model and update view
		     * 
		     * @param e    e
		     */
		internal function createMenuItems():void {
			// abstract function - override in subclass
		}
		internal function clearMenu():void {
			//var menuList:Array = (model as IBaseModel).getMenuList();
			if (container.numChildren > 0)
			{
				for (var i:uint=0; i<container.numChildren; i++)
				{
					//var stub:String = menuList[i].id.substr(0,1);
					//if (stub == "n" || stub == "d")
					//{
						container.removeChildAt(i);
						i--;
					//}
				}
			}
		}
		internal function onMenuBtnDown(e:MouseEvent):void {
			// rather than go through MVC, all of the menu functions
			// can be handled at this level, i.e., view. Only when the menu
			// item is dropped correctly will MVC have to be invoked
			
			// create a node
			
			// get node height from model
			var nodeHeight:uint = (model as PatternsModel).getNodeHeight();
			
			// get the node
			var menuBtnID:String = (e.target as Sprite).name;
			var menuBtnFunc:IPatternFunction = (model as IPatternsModel).getMenuBtnFunc(menuBtnID);
			
			if(!menuBtnFunc)
			{
				return;
			}
			
			// get colour
			var colour:uint = menuBtnFunc.heading.colour;
			
			// create temporary node
			var iNode:InteractiveNode = new InteractiveNode(nodeHeight, colour);
			
			// set its position 
			iNode.x = (e.target as Sprite).x + e.localX;
			iNode.y = (e.target as Sprite).y + e.localY;
			
			// set its name
			iNode.name = menuBtnID;

			// save a reference
			draggingInteractiveNode = iNode;
			
			// add an event listener to detect when it has been dropped
			stage.addEventListener(MouseEvent.MOUSE_UP, onTempBtnUp);
			
			// make draggable
			(iNode as Sprite).startDrag();
			
			// add it as a child
			addChild(iNode);
		}
		protected function onTempBtnUp(e:MouseEvent):void
		{
			stage.removeEventListener(MouseEvent.MOUSE_UP, onTempBtnUp);
			
			if(draggingInteractiveNode)
			{
				// find loc
				var iNode:Sprite = draggingInteractiveNode;
				draggingInteractiveNode = null;
				
				var loc:Point = new Point(iNode.x, iNode.y);
				
				// make sure it is outside of the menu itself
				// (prevents it from disappearing outside of the scrollrect set by the nodeswindow (see issue 162)
				//loc.x = Math.max(loc.x, width + 10);
				if(loc.x < 210 + iNode.width/2)
				{
					loc.x = 210 + iNode.width/2;
				}
				
				loc = localToGlobal(loc);
				var globalCoordinates:GlobalPoint = new GlobalPoint(loc.x, loc.y);
				
				(model as PatternsModel).createNode(iNode.name, globalCoordinates);

				removeChild(iNode);
			}
			
		}
		override public function update(e:ModelEvent = null):void {
			// abstract method - override in subclass
		}

	}//end MenuView

}