///////////////////////////////////////////////////////////
//  ConnectView.as
//  Macromedia ActionScript Implementation of the Class ConnectView
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2007 13:48:23
//  Original author: USER
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-09 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////

package org.glomaker.patternmaker.view
{
	import org.glomaker.patternmaker.events.*;
	
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.display.Stage;
	import flash.geom.Point;
	
	import org.glomaker.interfaces.pattern.IPatternNode;
	import org.glomaker.patternmaker.model.IBaseModel;
	import org.glomaker.patternmaker.model.IPatternsModel;

	/**
	 * @author USER
	 * @version 1.0
	 * @created 06-Nov-2007 13:48:23
	 */
	public class ConnectLayer extends Sprite 
	{
		
		private var model:IBaseModel;
		private var theStage:Stage;
		private var controller:Object;
		private var lineShape:Shape;
		private var connectShape:Shape;
		private var offset:Number;
		
		public function ConnectLayer(aModel:IBaseModel,  aStage:Stage, aController:Object = null) 
		{
			model = aModel;
			theStage = aStage;
			controller = aController;
			lineShape = new Shape();
			connectShape = new Shape()
			offset = ((model as IPatternsModel).getNodeHeight() / 2) + 2;
		
			addChild(lineShape);
			addChild(connectShape);
			
		}
		
		/**
		 * Draws a line from the bottom connector to the mouse location 
		 * @param container
		 * 
		 */
		public function drawLine(container:Sprite):void
		{
			// get nodeArray
			var nodeArray:Array = (model as IPatternsModel).getNodeArray();
			var activeNode:IPatternNode = null;
			
			// find mouse location
			var mouseLoc:Point = new Point(theStage.mouseX, theStage.mouseY);
			
			// make mouse location local to the container
			var loc:Point = container.globalToLocal(mouseLoc);
			
			// find the active node, if there is one
			for (var i:uint=0; i<nodeArray.length; i++)
			{
				if ((model as IPatternsModel).getActive(nodeArray[i].id))
				{
					activeNode = nodeArray[i];
					break;
				}
			}
			
			// if there is an active node, draw a line from its bottom button to the mouse location
			if (activeNode)
			{
				var nodeHeight:uint = (model as IPatternsModel).getNodeHeight();
				nodeHeight = nodeHeight / 2;

				clearDraggableLine();
				
				lineShape.graphics.lineStyle(1);
				lineShape.graphics.moveTo(globalToLocal(activeNode.loc).x, globalToLocal(activeNode.loc).y + nodeHeight);
				lineShape.graphics.lineTo(loc.x, loc.y);

			}
		}
		
		public function connect(nodesContainer:Sprite):void 
		{
			// connect layer should derive node positions directly, rather than from the model
			// this step is superfluous
			var child:IPatternNode;
			var parent:Node;
			
			connectShape.graphics.clear();
			connectShape.graphics.lineStyle(1)
			
			for(var i:uint=0; i<nodesContainer.numChildren; i++)
			{
				if(nodesContainer.getChildAt(i) is Node)
				{
					// find whether parent has a child
					parent = nodesContainer.getChildAt(i) as Node;
					
					child = (model as IPatternsModel).getChild(parent.name);
					
					if(child != null)
					{
						var childNode:Node = findChild(nodesContainer, child.id);
						// var globalCoordinates:Point = ((model as IPatternsModel).getLoc(child.id) as  GlobalPoint) as Point;
						
						if(childNode == null)
						{
							return;
						}
						
						connectShape.graphics.moveTo(parent.x, parent.y + offset + 2);
						connectShape.graphics.lineTo(childNode.x, childNode.y - (offset + 2)); 
					}
				
				}
			}
			
		}
		
		protected function findChild(nodeContainer:Sprite, childID:String):Node
		{
			var node:Node;
			
			for(var i:uint=0; i<nodeContainer.numChildren; i++)
			{
				if(nodeContainer.getChildAt(i) is Node)
				{
					node = nodeContainer.getChildAt(i) as Node;
					
					if(node.name == childID)
					{
						return node;
					}
				}
			}
			
			return null;
		}
		
		public function clearAll():void{
			
			lineShape.graphics.clear();
			connectShape.graphics.clear();
		}
		
		public function clearDraggableLine():void
		{
			lineShape.graphics.clear();
		}
	}
}