///////////////////////////////////////////////////////////
//  BaseController.as
//  Macromedia ActionScript Implementation of the Class BaseController
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2007 13:48:23
//  Original author: USER
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-09 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////

package org.glomaker.patternmaker.controller
{
	import org.glomaker.patternmaker.data.GlobalPoint;
	
	import org.glomaker.patternmaker.events.*;
	
	import flash.display.Stage;
	import flash.events.*;
	
	import org.glomaker.patternmaker.view.*;
	
	import org.glomaker.patternmaker.model.IBaseModel;
	import org.glomaker.patternmaker.model.IPatternsModel;

	/**
	 * @author USER
	 * @version 1.0
	 * @created 06-Nov-2007 13:48:23
	 */
	public class PatternsController extends BaseController implements IPatternsController {

		/**
		     * CONSTRUCTOR
		     * 
		     * @param aModel    aModel
		     */
		public function PatternsController(aModel:IPatternsModel, aStage:Stage) {
			super(aModel);
		}
		/**
		     * 
		     * @param e    e
		     */
		public function setActiveNode(active:Boolean = false, nodeID:String = null):void {
			//If set to true, set the node specified to true. Otherwise, all to false.
			if (active && nodeID != null)
			{
				(model  as  IPatternsModel).setActive(nodeID, true);
			} else if(!active && nodeID != null)
			{
				(model  as  IPatternsModel).setActive(nodeID, false);
			}else{
				(model  as  IPatternsModel).deactivateNodes();
			}
		}
		public function setConnection():void {
			(model  as  IPatternsModel).setConnection();
		}
		/* public function setDrag(draggable:Boolean, nodeID:String = null):void {
			if (draggable)
			{
				(model  as  IPatternsModel).setDrag(nodeID, true);
			} else
			{ 	
				var nodeArray:Array = (model as IPatternsModel).getNodeArray();
				for (var i:uint=0; i<nodeArray.length; i++)
				{
					var node:String = nodeArray[i].id;
					(model  as  IPatternsModel).setDrag(node, false);
				}
			}
			

		} */
		public function setReceiver(receiving:Boolean = false, nodeID:String = null):void{
			if(receiving && nodeID != null){
				(model  as  IPatternsModel).setReceiver(nodeID, true);
			}else if(!receiving && nodeID != null){
				(model  as  IPatternsModel).setReceiver(nodeID, false);
			}else{
				(model  as  IPatternsModel).deactivateNodes();
			}
			
		}
		public function drawLine():void{
			var nodeArray:Array = (model as IPatternsModel).getNodeArray();
			for (var i:uint=0; i<nodeArray.length; i++)
			{
				if (nodeArray[i].active)
				{
					(model  as  IPatternsModel).drawLine();

					break;
				}
			}
		}
		public function setLoc(nodeID:String, loc:GlobalPoint):void{
			(model  as  IPatternsModel).setLoc(nodeID, loc);
		}
		public function removeNode(nodeID:String):void{
			(model as IPatternsModel).removeNode(nodeID);
		}
		public function extractNode(nodeID:String):void{
			(model as IPatternsModel).extractNode(nodeID);
		}
		public function removeAllNodes():void{
			(model as IPatternsModel).removeAllNodes();
		}
		public function makeActiveSequence(nodeID:String):void{
			(model as IPatternsModel).setActiveSequence(nodeID);
		}
		public function fileHandler(action:String, filePath:String = null):void{
			switch(action){
				case "open":
				(model as IBaseModel).setXML(filePath);

				break;
				case "save":
				//
				break;
				case "exportToGlo":
				//
				break;
				case "loadDefaultPatterns":
				//(model as IBaseModel).setXML(filePath);
				break;
				
				
			}
		}
		/* public function buildInstance():void
		{
			throw(new Event("BUILD"));
			(model as IPatternsModel).buildInstance();
		} */
		
		public function setTitleText(nodeID:String, input:String):void{
			(model as IPatternsModel).setTitleText(nodeID, input);
		}
		public function setExplainText(nodeID:String, input:String):void{
			(model as IPatternsModel).setExplainText(nodeID, input);
		}
		override public function menuBtnHandler(e:MouseEvent, loc:GlobalPoint):void {
			//Overrides menuBtnHandler in BaseController
			var menuBtnID:String = e.target.name;
			//var loc:Point = new Point();
			
			// possible cause od misplacement. Flex uses different coordinate system
			//loc.x = e.stageX; 
			//loc.y = e.stageY;
			
			
			(model  as  IPatternsModel).createNode(menuBtnID, loc);
			
		}

		public function nodeBtnHandler(patternName:String):void {
		}
		public function setImportType(type:String):void{
			(model  as  IBaseModel).setImportType(type);
		}
		public function setGLO_manifest(manifest:XML):void{
			(model  as  IBaseModel).setGLO_manifest(manifest);
		}
		

	}//end PatternsController

}